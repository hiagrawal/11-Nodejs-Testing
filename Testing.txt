We will be using Mocha, Chai for Testing
Docs: 
https://mochajs.org/
https://www.chaijs.com/
https://www.chaijs.com/api/bdd/

install in application:
npm install --save-dev mocha chai

to run test, add command in package.json file
There we see 'test' command in scripts, give it value 'mocha'

and now run in terminal type 'npm test'. It will run all the test cases written

To write test case, Mocha looks for folder named 'test'. It has to be test only and inside this, we can create javascript files 
of any name

Now Mocha is responsible for running our tests and giving us 'it' function, 
chai is responsible for defining our success conditions that is expect funtion we get from chai

describe() is used to group test cases and we can have multiple describe nested in one another

What not to test:
We should not test any third party/ external packages methods or functions. They provide us the methods and they do it on their own
we just have to test our functionality, our logic

so in auth middleware, we are not supposed to test jwt verify method as it is jwt method and logic
what we should test is.. if verify method returns success or failure and if our code works correctly
that if decodedToken is not there then it should throw error and if it is there then it should have userid

Using Stubs:
to mock a function in our test case, to test one scenario wherein we get userId from verify method, 
we can replace the original verify method with the one in our test case. so whenevr it exceutes the authMiddleware, 
it takes the verify method what we have defined in our test case

the down sight of this is.. it replaces verify method globally so if we have scenario where we want to execute the
actual verify method defined in middleware in any test case written after this test case 
(that is after it has done replacing, test cases written before this test case would not be impacted), 
we will never be able to get acutal verify method and to fix this we can use third party pkgs to mock a function

that package is 'sinon'

npm install --save-dev sinon
sinon is a package that allows to stub/mock the original function and restore the original function as and when needed

we use sinon.stub method and pass the object/paramter that has to stub as first argumnet and then it's method as second argument
this returns an empty object, we can leave it as it is or set it to any value using 'returns' method provided by sinon on teh method called
we can also check if this jwt verify method has been called in actual auth middlware by using 'called' property
and then restore as well using 'restore' method

        sinon.stub(jwt, 'verify');
        jwt.verify.returns({userId: 'abc'});
        authMiddleware(req, {}, () => {});
        expect(jwt.verify.called).to.be.true;
        expect(req).to.have.property('userId');
        expect(req).to.have.property('userId', 'abc');
        jwt.verify.restore();

Now what to test next
To understand, we are doing unit testing wherein we are supposed to test our code, our logic defined by us
we are not supposed to test other pkgs methods as well as other integration logic like when we are giving some url/API,
it is getting redirected to the controller method or not. that will be integration testing and hence we woul not testing it
so we will not test routes files

what is need to test is our controller logic
Now to test controller logic, we need to have logic of database
and to test that, we have two approaches:
1. we mock the database method and its return value using sinon stub that we did earlier

To test Async code:
-First we will write the return statements in our login method so when we call it asynchronously, it returns us the result of that call
-Now to call the method in testing file asynchronously, we need to use 'done' paramter provided by mocha
'done' detects the asynchronous code and wait for it execution. Although it detects on its own, but we cant rely on it completely and 
-should explicity also call done() method where there is asynchronous code 
-without done, code will be executed synchronously and will not wait for the 'then' code to execute and will always pass the testcase
which is the false scenario as it never executed those scenarios written inside then block

2. We can have a separate testing database
Downsignt of it is.. test will take a little longer to run 
but the upsight is we will have a more realistic testing as we will have a database. 
Also it will be little easier to write testcases and test as will not have to stub database data everytime

To set this up: can use the same code that we wrote in app.js to create a database. Just with the different database name
that is super important cz we dont want to manipulate the real database

since we are using real database here, so time to run the testcase might increase. default it is 2s which is 2000
we can change it in package.json file to 5s which is 5000
"test": "mocha --timeout 5000"

- Keep in mind.. we are able to use 'then' on calling method coz async await by default returns a promise.
AuthController.getStatus(req, res, () => {}).then

- if we would have used promises for asynchronous calling instead of async await then we would not be able to use 'then'

- one thing is, once we run npm test, it does not quit the process automatically.
and the reason for that is.. done detects if all processes are done executing and it finds that the mongodb is still running
so once we are done executing our test cases, we disconnect to the db and then call 'done'

-also, once we are done executing, delete data from the database else it might be an issue like in our case if we run the test
again, it throws an error as user with the id already exists

Hooks:
we have before(), after(), beforeEach(), afterEach() hooks. all this define the sequence in which code should be executed

so if we have a common code that needs to be run before all test case but just once then can write common code in before hook
so it be executed and then each 'it' function

same is with after, if there is some common code that needs to be run after all test case but just once then can write it in 
after hook so all 'it' function will be executed one by one and then after function

beforeEach and afterEach is for something that we want to run individually for each test case

so lets say we have 2 'it' function then the execution will be-
- before
-beforeEach
- it
-afterEach
-beforeEach
-it
-afterEach
-after

these hooks can be aywhere inside describe method, their position does not matter
can be before or after the 'it' function declaration

advantage of this is.. even if any test case fails, after will be run and clear the database and disconnect it

Useful Resources:

Mocha: https://mochajs.org/

Chai: https://www.chaijs.com/

Sinon: https://sinonjs.org/
