We will be using Mocha, Chai for Testing
Docs: 
https://mochajs.org/
https://www.chaijs.com/
https://www.chaijs.com/api/bdd/

install in application:
npm install --save-dev mocha chai

to run test, add command in package.json file
There we see 'test' command in scripts, give it value 'mocha'

and now run in terminal type 'npm test'. It will run all the test cases written

To write test case, Mocha looks for folder named 'test'. It has to be test only and inside this, we can create javascript files 
of any name

Now Mocha is responsible for running our tests and giving us 'it' function, 
chai is responsible for defining our success conditions that is expect funtion we get from chai

describe() is used to group test cases and we can have multiple describe nested in one another

What not to test:
We should not test any third party/ external packages methods or functions. They provide us the methods and they do it on their own
we just have to test our functionality, our logic

so in auth middleware, we are not supposed to test jwt verify method as it is jwt method and logic
what we should test is.. if verify method returns success or failure and if our code works correctly
that if decodedToken is not there then it should throw error and if it is there then it should have userid

Using Stubs:
to mock a function in our test case, to test one scenario wherein we get userId from verify method, 
we can replace the original verify method with the one in our test case. so whenevr it exceutes the authMiddleware, 
it takes the verify method what we have defined in our test case

the down sight of this is.. it replaces verify method globally so if we have scenario where we want to execute the
actual verify method defined in middleware in any test case written after this test case 
(that is after it has done replacing, test cases written before this test case would not be impacted), 
we will never be able to get acutal verify method and to fix this we can use third party pkgs to mock a function

that package is 'sinon'

npm install --save-dev sinon
sinon is a package that allows to stub/mock the original function and restore the original function as and when needed

we use sinon.stub method and pass the object/paramter that has to stub as first argumnet and then it's method as second argument
this returns an empty object, we can leave it as it is or set it to any value using 'returns' method provided by sinon on teh method called
we can also check if this jwt verify method has been called in actual auth middlware by using 'called' property
and then restore as well using 'restore' method

        sinon.stub(jwt, 'verify');
        jwt.verify.returns({userId: 'abc'});
        authMiddleware(req, {}, () => {});
        expect(jwt.verify.called).to.be.true;
        expect(req).to.have.property('userId');
        expect(req).to.have.property('userId', 'abc');
        jwt.verify.restore();


